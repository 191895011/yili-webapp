<template>
<div>
   <div >
     <div class="Member-nav">
       <router-link to="/member">
         <div class="Member-back">
            <span class="iconfont ">&#xe602;</span>
            {{MemberTitle.back}}
         </div>
       </router-link>
       <div class="Member-collection">
          <h4 class="Member-msgtitle">{{MemberTitle.title}}</h4>
       </div>
       <div class="member-rightdel">
         <el-button type="primary" icon="el-icon-delete" circle  @click="teachData_remove"></el-button>
     </div>
     </div>
     <ul class="job_ul">
       <li class="job_li border-bottom">
         <div class="job_left" :class="{ color_error: TeachData.StartTimeActive }">
           <i class="Requiredcolor">*</i>开始时间
         </div>
         <div class="job_right"  @click="setDate">
            {{TeachData.StartTime}}
            <span class="iconfont job_time">&#xe644;</span>
         </div>
       </li>
       <li class="job_li border-bottom">
         <div class="job_left" :class="{ color_error: TeachData.EndTimeActive}">
           <i class="Requiredcolor">*</i>结束时间
         </div>
         <div class="job_right"  @click="setDate2">
            {{TeachData.EndTime}}
            <span class="iconfont job_time">&#xe644;</span>
         </div>
       </li>
       <li class="job_li border-bottom">
         <div class="job_left" :class="{ color_error: TeachData.unitAcitve }">
           <i class="Requiredcolor">*</i>学校名称
         </div>
         <div class="job_right">
             <input type="text" placeholder="请在此处输入"  v-model.trim="TeachData.unit"/>
         </div>
       </li>
       <li class="job_li border-bottom">
         <div class="job_left" :class="{ color_error: TeachData.educationAcitve }">
           <i class="Requiredcolor">*</i>学历
         </div>
         <div class="job_right" @click="User_Selecteducationsk">
             {{TeachData.education}}
         </div>
       </li>
       <li class="job_li border-bottom">
         <div class="job_left" :class="{ color_error: TeachData.unitTypeAcitve }">
           <i class="Requiredcolor">*</i>学校类型
         </div>
         <div class="job_right" v-show="!user_educationselect" >
             {{TeachData.unitType}}
         </div>
         <div class="job_right" v-show="user_educationselect"  @click="User_Selectschoolsk">
             {{TeachData.unitType}}
         </div>
       </li>
       <li class="job_li border-bottom">
         <div class="job_left" :class="{ color_error: TeachData.TeachModusAcitve }">
           <i class="Requiredcolor">*</i>教育形式
         </div>
         <div class="job_right" v-show="!TeachModus_select">
             {{TeachData.TeachModus}}
         </div>
         <div class="job_right" @click="User_SelectTeachModussk" v-show="TeachModus_select">
             {{TeachData.TeachModus}}
         </div>
       </li>
       <li class="job_li border-bottom">
         <div class="job_left" :class="{ color_error: TeachData.ProfessionTypeAcitve }">
           <i class="Requiredcolor" v-show="ProfessionType_select">*</i>专业类别
         </div>
         <div class="job_right" v-show="!ProfessionType_select">
             <input type="text"  disabled="disabled" />
         </div>
         <div class="job_right" v-show="ProfessionType_select" @click="User_SelectProfessionsk" >
             {{TeachData.ProfessionType}}
         </div>
       </li>
       <li class="job_li border-bottom">
         <div class="job_left" :class="{ color_error: TeachData.ProfessionAcitve }">
           <i class="Requiredcolor" v-show="Profession_selectchu">*</i>专业
         </div>
         <div class="job_right">
              <input type="text" placeholder="请在此处输入" v-show="Profession_selectchu" v-model.trim="TeachData.Profession"/>
              <input type="text" disabled="disabled" v-show="!Profession_selectchu" v-model="TeachData.Profession"/>
         </div>
       </li>
       <li class="job_li border-bottom" >
         <div class="job_left" :class="{ color_error: TeachData.CertificateNumberAcitve}">
           <i class="Requiredcolor" v-show="CertificateNumber_select">*</i>学历证书编号
         </div>
         <div class="job_right">
             <input type="text" placeholder="请在此处输入" v-show="CertificateNumber_select"  v-model.trim="TeachData.CertificateNumber"/>
             <input type="text" disabled="disabled"  v-show="!CertificateNumber_select" v-model="TeachData.CertificateNumber"/>
         </div>
       </li>
       <li class="job_li border-bottom">
         <div class="job_left" :class="{ color_error: TeachData.DegreeNumberAcitve}">
          <i class="Requiredcolor" v-show="DegreeNumber_select">*</i>学位证书编号
         </div>
         <div class="job_right">
              <input type="text" placeholder="请在此处输入" v-show="DegreeNumber_select" v-model.trim="TeachData.DegreeNumber"/>
              <input type="text" disabled="disabled" v-show="!DegreeNumber_select" v-model="TeachData.DegreeNumber"/>
         </div>
       </li>
       <li class="job_li border-bottom">
         <div class="job_left" :class="{ color_error: TeachData.SecDegreeAcitve}">
            是否第二学位
         </div>
         <div class="job_right" v-show="SecDegree_select" @click="User_SelectSecDegreesk">
               {{TeachData.SecDegree}}
         </div>
         <div class="job_right" v-show="!SecDegree_select">
            <input type="text"  disabled="disabled" />
         </div>
       </li>
     </ul>
     <p class="job_title">备注</p>
     <textarea class="job_memark" placeholder="请在此处输入" v-model.trim="TeachData.Remarks"></textarea>
     <div class="job_keep">
        <mt-button type="primary" size="normal" class="job_btn" @click="teachData_keep">保存</mt-button>
       <!--  <mt-button type="danger" size="normal"  class="job_btn job_delete" @click="teachData_remove">删除</mt-button> -->
     </div>
    </div>
    <!--学校类型-->
    <mt-popup
        v-model="schoolVisible"
        position="bottom"
        popup-transition="popup-fade">
      <mt-picker :slots="schoolslots" @change="onValuesschoolChange"  class="levelselect" showToolbar>
           <div class="picker-toolbar-title">
               <div class="usi-btn-cancel" @click="User_Selectschoolsk">
                  取消
               </div>
               <div>
               </div>
               <div class="usi-btn-sure" @click="User_SelectschoolSure">
                 确定
               </div>
            </div>
     </mt-picker>
   </mt-popup>
   <!--学历-->
   <mt-popup
        v-model="educationVisible"
        position="bottom"
        popup-transition="popup-fade">
      <mt-picker :slots="educationslots" @change="onValueseducationChange"  class="levelselect" showToolbar>
           <div class="picker-toolbar-title">
               <div class="usi-btn-cancel" @click="User_Selecteducationsk">
                  取消
               </div>
               <div>
               </div>
               <div class="usi-btn-sure" @click="User_SelecteducationSure">
                 确定
               </div>
            </div>
     </mt-picker>
   </mt-popup>
   <!--专业类别-->
   <mt-popup
        v-model="ProfessionVisible"
        position="bottom"
        popup-transition="popup-fade">
      <mt-picker :slots="Professionslots" @change="onValuesProfessionChange"  class="levelselect" showToolbar>
           <div class="picker-toolbar-title">
               <div class="usi-btn-cancel" @click="User_SelectProfessionsk">
                  取消
               </div>
               <div>
               </div>
               <div class="usi-btn-sure" @click="User_SelecteProfessionSure">
                 确定
               </div>
            </div>
     </mt-picker>
   </mt-popup>
   <!--教育形式-->
    <mt-popup
        v-model="TeachModusVisible"
        position="bottom"
        popup-transition="popup-fade">
      <mt-picker :slots="TeachModusslots" @change="onValuesTeachModusChange"  class="levelselect" showToolbar>
           <div class="picker-toolbar-title">
               <div class="usi-btn-cancel" @click="User_SelectTeachModussk">
                  取消
               </div>
               <div>
               </div>
               <div class="usi-btn-sure" @click="User_SelecteTeachModusSure">
                 确定
               </div>
            </div>
     </mt-picker>
   </mt-popup>
   <!--第二学位-->
   <mt-popup
        v-model="SecDegreeVisible"
        position="bottom"
        popup-transition="popup-fade">
      <mt-picker :slots="SecDegreeslots" @change="onValuesSecDegreeChange"  class="levelselect" showToolbar>
         <div class="picker-toolbar-title">
             <div class="usi-btn-cancel" @click="User_SelectSecDegreesk">
                取消
             </div>
             <div>
             </div>
             <div class="usi-btn-sure" @click="User_SelecteSecDegreeSure">
               确定
             </div>
          </div>
     </mt-picker>
   </mt-popup>
 </div>
</template>
<script>
import { MessageBox } from 'mint-ui'
export default {
  name: 'teachdata',
  data () {
    return {
      schoolVisible: false,
      educationVisible: false,
      ProfessionVisible: false,
      TeachModusVisible: false,
      SecDegreeVisible: false,
      user_educationselect: true,
      ProfessionType_select: true,
      TeachModus_select: true,
      CertificateNumber_select: true,
      DegreeNumber_select: true,
      Profession_selectchu: true,
      SecDegree_select: true,
      MemberTitle: {
        back: '返回',
        title: '教育背景'
      },
      TeachData: {
        StartTime: '请选择时间',
        StartTimeActive: false,
        EndTime: '请选择时间',
        EndTimeActive: false,
        unit: '',
        unitAcitve: false,
        unitType: '',
        unitTypeAcitve: false,
        education: '',
        educationAcitve: false,
        ProfessionType: '',
        ProfessionTypeAcitve: false,
        Profession: '',
        ProfessionAcitve: false,
        TeachModus: '',
        TeachModusAcitve: false,
        CertificateNumber: '',
        CertificateNumberAcitve: false,
        DegreeNumber: '',
        DegreeNumberAcitve: false,
        Remarks: '',
        unitType_set: '',
        education_set: '',
        ProfessionType_set: '',
        TeachModus_set: '',
        SecDegree: '',
        SecDegree_set: '',
        SecDegreeAcitve: false
      },
      schoolslots: [
        {
          flex: 1,
          values: ['普通高等学校', '985高等学校', '211高等学校', '成人高等学校', '党校', '专业类院校', '科研机构', '网络教育', '自学考试', '其他'],
          textAlign: 'center'
        }
      ],
      educationslots: [
        {
          flex: 1,
          values: ['初中及以下', '高中', '职业高中', '中技', '中专', '大专', '大学', '硕士研究生', '博士研究生', '博士后'],
          textAlign: 'center'
        }
      ],
      Professionslots: [
        {
          flex: 1,
          values: ['哲学', '经济学', '法学', '教育学', '文学', '艺术学', '历史学', '理学', '工学', '农学', '医学', '管理学', '军事学'],
          textAlign: 'center'
        }
      ],
      TeachModusslots: [
        {
          flex: 1,
          values: ['普通全日制', '在职全脱产', '在职半脱产', '在职不脱产', '远程教育'],
          textAlign: 'center'
        }
      ],
      SecDegreeslots: [
        {
          flex: 1,
          values: ['是', '否'],
          textAlign: 'center'
        }
      ],
      secoptions: [
        {
          label: '选项A',
          value: '值A'
        }
      ]
    }
  },
  methods: {
    setDate () {
      this.$picker.show({
        type: 'datePicker',
        endTime: '2280-02-11',
        startTime: '1900-01-01',
        onOk: (date) => {
          this.TeachData.StartTime = date
        }
      })
    },
    setDate2 () {
      this.$picker.show({
        type: 'datePicker',
        endTime: '2280-02-11',
        startTime: '1900-01-01',
        onOk: (e) => {
          this.TeachData.EndTime = e
        }
      })
    },
    teachData_keep () {
      // js not  verification
      // const TeachData = this.TeachData
      // const ID = this.$route.query.name
      // if (ID === undefined) {
      //   let listlength = this.$store.state.Teachbg.TeachbgdataList.length + 1
      //   let addmsg = {
      //     id: listlength,
      //     StartTime: TeachData.StartTime,
      //     EndTime: TeachData.EndTime,
      //     unit: TeachData.unit,
      //     unitType: TeachData.unitType,
      //     education: TeachData.education,
      //     ProfessionType: TeachData.ProfessionType,
      //     Profession: TeachData.Profession,
      //     TeachModus: TeachData.TeachModus,
      //     CertificateNumber: TeachData.CertificateNumber,
      //     DegreeNumber: TeachData.DegreeNumber,
      //     Remarks: TeachData.Remarks
      //   }
      //   this.$store.commit('TeachbgAddMsg', addmsg)
      //   this.$router.push({
      //     path: `/member`
      //   })
      // } else {
      //   let writemsg = {
      //     id: ID,
      //     StartTime: TeachData.StartTime,
      //     EndTime: TeachData.EndTime,
      //     unit: TeachData.unit,
      //     unitType: TeachData.unitType,
      //     education: TeachData.education,
      //     ProfessionType: TeachData.ProfessionType,
      //     Profession: TeachData.Profession,
      //     TeachModus: TeachData.TeachModus,
      //     CertificateNumber: TeachData.CertificateNumber,
      //     DegreeNumber: TeachData.DegreeNumber,
      //     Remarks: TeachData.Remarks
      //   }
      //   this.$store.commit('TeachbgWriteMsg', writemsg)
      //   this.$router.push({
      //     path: `/member`
      //   })
      // }
      // MessageBox('信息正确', '信息保存成功')

      const TeachData = this.TeachData
      const ID = this.$route.query.name
      let msgSelected = true
      // time no right
      if (TeachData.StartTime === '请选择时间') {
        TeachData.StartTimeActive = true
        msgSelected = false
      } else if (TeachData.StartTime !== '') {
        TeachData.StartTimeActive = false
      }
      if (TeachData.EndTime === '请选择时间') {
        TeachData.EndTimeActive = true
        msgSelected = false
      } else if (TeachData.EndTime !== '') {
        TeachData.EndTimeActive = false
      }
      if (TeachData.StartTime > TeachData.EndTime) {
        TeachData.StartTimeActive = true
        TeachData.EndTimeActive = true
        msgSelected = false
      } else if (TeachData.StartTime !== '请选择时间' && TeachData.EndTime !== '请选择时间') {
        TeachData.StartTimeActive = false
        TeachData.EndTimeActive = false
      }
      // school name not empty
      if (TeachData.unit === '') {
        TeachData.unitAcitve = true
        msgSelected = false
      } else {
        TeachData.unitAcitve = false
      }
      // education not empty
      if (TeachData.education === '') {
        TeachData.educationAcitve = true
        msgSelected = false
      } else {
        TeachData.educationAcitve = false
      }
      // Teach type not empty
      if (TeachData.unitType === '') {
        TeachData.unitTypeAcitve = true
        msgSelected = false
      } else {
        TeachData.unitTypeAcitve = false
      }
      // TeachModus type not empty
      if (TeachData.TeachModus === '') {
        TeachData.TeachModusAcitve = true
        msgSelected = false
      } else {
        TeachData.TeachModusAcitve = false
      }
      // education type select
      if (TeachData.education !== '') {
        if (TeachData.education === '初中及以下' || TeachData.education === '高中') {
          TeachData.ProfessionAcitve = false
        } else if (TeachData.education !== '') {
          if (TeachData.Profession === '') {
            TeachData.ProfessionAcitve = true
            msgSelected = false
          } else {
            TeachData.ProfessionAcitve = false
          }
        }
      }
      // certificate number
      if (this.CertificateNumber_select) {
        if (TeachData.CertificateNumber === '') {
          TeachData.CertificateNumberAcitve = true
          msgSelected = false
        } else {
          TeachData.CertificateNumberAcitve = false
        }
      } else {
        TeachData.CertificateNumberAcitve = false
      }
      // DegreeNumber Judge secdegree judge
      if (this.DegreeNumber_select) {
        if (TeachData.DegreeNumber === '') {
          TeachData.DegreeNumberAcitve = true
          msgSelected = false
        } else {
          TeachData.DegreeNumberAcitve = false
        }
        // if (TeachData.SecDegree === '') {
        //   TeachData.SecDegreeAcitve = true
        //   msgSelected = false
        // } else {
        //   TeachData.SecDegreeAcitve = false
        // }
      } else {
        TeachData.DegreeNumberAcitve = false
        TeachData.SecDegreeAcitve = false
      }
      // msg right to submit
      if (msgSelected) {
        if (ID === undefined) {
          let listlength = this.$store.state.Teachbg.TeachbgdataList.length + 1

          let addmsg = {
            id: listlength,
            StartTime: TeachData.StartTime,
            EndTime: TeachData.EndTime,
            unit: TeachData.unit,
            unitType: TeachData.unitType,
            education: TeachData.education,
            ProfessionType: TeachData.ProfessionType,
            Profession: TeachData.Profession,
            TeachModus: TeachData.TeachModus,
            CertificateNumber: TeachData.CertificateNumber,
            DegreeNumber: TeachData.DegreeNumber,
            Remarks: TeachData.Remarks,
            SecDegree: TeachData.SecDegree
          }
          this.$store.commit('TeachbgAddMsg', addmsg)
          this.$router.push({
            path: `/member`
          })
        } else {
          let writemsg = {
            id: ID,
            StartTime: TeachData.StartTime,
            EndTime: TeachData.EndTime,
            unit: TeachData.unit,
            unitType: TeachData.unitType,
            education: TeachData.education,
            ProfessionType: TeachData.ProfessionType,
            Profession: TeachData.Profession,
            TeachModus: TeachData.TeachModus,
            CertificateNumber: TeachData.CertificateNumber,
            DegreeNumber: TeachData.DegreeNumber,
            Remarks: TeachData.Remarks,
            SecDegree: TeachData.SecDegree
          }
          this.$store.commit('TeachbgWriteMsg', writemsg)
          this.$router.push({
            path: `/member`
          })
        }
        MessageBox('信息正确', '信息保存成功')
      } else {
        MessageBox('提交信息有误', '有误信息已经标红,请修改')
      }
    },
    // school Type
    User_Selectschoolsk () {
      this.schoolVisible = !this.schoolVisible
    },
    User_SelectschoolSure () {
      if (this.TeachData.unitType_set === '') {
        this.TeachData.unitType_set = '普通高等学校'
      }
      this.TeachData.unitType = this.TeachData.unitType_set
      this.schoolVisible = !this.schoolVisible
    },
    onValuesschoolChange (picker, values) {
      this.TeachData.unitType_set = values[0]
      if (values[0] > values[1]) {
        picker.setSlotValue(1, values[0])
      }
    },
    // education select
    User_Selecteducationsk () {
      this.educationVisible = !this.educationVisible
    },
    User_SelecteducationSure () {
      // 学历选择
      if (this.TeachData.education_set === '') {
        this.TeachData.education_set = '初中及以下'
      }
      this.TeachData.education = this.TeachData.education_set
      this.educationVisible = !this.educationVisible
      let education = this.TeachData.education
      // School Type
      if (education === '大专' || education === '大学' || education === '硕士研究生' || education === '博士研究生' || education === '博士后') {
        this.user_educationselect = true
        // this.TeachData.unitType = '普通高等学校'
      } else {
        this.user_educationselect = false
        this.TeachData.unitType = '其他'
      }
      // Teach Modus
      if (education === '初中及以下' || education === '高中') {
        console.log('选择内容')
        this.TeachData.TeachModus = '普通全日制'
        this.TeachModus_select = false
      } else {
        this.TeachModus_select = true
      }
      // profession type select  DegreeNumber
      if (education === '大学' || education === '硕士研究生' || education === '博士研究生' || education === '博士后') {
        this.ProfessionType_select = true
        // this.TeachData.ProfessionType_set = '哲学'
        this.DegreeNumber_select = true
        this.SecDegree_select = true
      } else {
        this.ProfessionType_select = false
        this.TeachData.ProfessionType = ''
        this.DegreeNumber_select = false
        this.TeachData.DegreeNumber = ''
        this.SecDegree_select = false
      }
      // profession write
      if (education === '初中及以下' || education === '高中') {
        this.Profession_selectchu = false
        this.TeachData.Profession = ''
      } else {
        this.Profession_selectchu = true
      }
      // Diploma select
      if (education === '初中及以下' || education === '高中' || education === '职业高中') {
        this.TeachData.CertificateNumber = ''
        this.CertificateNumber_select = false
      } else {
        this.CertificateNumber_select = true
      }
    },
    onValueseducationChange (picker, values) {
      this.TeachData.education_set = values[0]
      if (values[0] > values[1]) {
        picker.setSlotValue(1, values[0])
      }
    },
    // profession select
    User_SelectProfessionsk () {
      this.ProfessionVisible = !this.ProfessionVisible
    },
    User_SelecteProfessionSure () {
      if (this.TeachData.ProfessionType_set === '') {
        this.TeachData.ProfessionType_set = '哲学'
      }
      this.TeachData.ProfessionType = this.TeachData.ProfessionType_set
      this.ProfessionVisible = !this.ProfessionVisible
    },
    onValuesProfessionChange (picker, values) {
      this.TeachData.ProfessionType_set = values[0]
      if (values[0] > values[1]) {
        picker.setSlotValue(1, values[0])
      }
    },
    // Teach Modus
    User_SelectTeachModussk () {
      this.TeachModusVisible = !this.TeachModusVisible
    },
    User_SelecteTeachModusSure () {
      if (this.TeachData.TeachModus_set === '') {
        this.TeachData.TeachModus_set = '普通全日制'
      }
      this.TeachData.TeachModus = this.TeachData.TeachModus_set
      this.TeachModusVisible = !this.TeachModusVisible
    },
    onValuesTeachModusChange (picker, values) {
      this.TeachData.TeachModus_set = values[0]
      if (values[0] > values[1]) {
        picker.setSlotValue(1, values[0])
      }
    },
    // second degree select
    User_SelectSecDegreesk () {
      this.SecDegreeVisible = !this.SecDegreeVisible
    },
    User_SelecteSecDegreeSure () {
      if (this.TeachData.SecDegree_set === '') {
        this.TeachData.SecDegree_set = '是'
      }
      this.TeachData.SecDegree = this.TeachData.SecDegree_set
      this.SecDegreeVisible = !this.SecDegreeVisible
    },
    onValuesSecDegreeChange (picker, values) {
      this.TeachData.SecDegree_set = values[0]
      if (values[0] > values[1]) {
        picker.setSlotValue(1, values[0])
      }
    },
    teachData_remove () {
      const ID = this.$route.query.name
      if (ID === undefined) {
        this.$router.push({
          path: `/member`
        })
        MessageBox('信息删除', '信息删除成功')
      } else {
        this.$store.commit('TeachbgRemoveMsg', ID)
        this.$router.push({
          path: `/member`
        })
        MessageBox('信息删除', '信息删除成功')
      }
    }
  },
  mounted () {
    console.log('进入页面')
    const ID = this.$route.query.name
    const TeachData = this.TeachData
    TeachData.educationAcitve = false
    TeachData.unitTypeAcitve = false
    TeachData.ProfessionTypeAcitve = false
    TeachData.TeachModusAcitve = false
    TeachData.StartTimeActive = false
    TeachData.EndTimeActive = false
    TeachData.unitAcitve = false
    TeachData.ProfessionAcitve = false
    TeachData.CertificateNumberAcitve = false
    this.schoolVisible = false
    this.educationVisible = false
    this.ProfessionVisible = false
    this.TeachModusVisible = false
    this.user_educationselect = true
    this.ProfessionType_select = true
    this.TeachModus_select = true
    this.CertificateNumber_select = true
    this.DegreeNumber_select = true
    this.Profession_selectchu = true
    if (ID === undefined) {
      console.log('创建新模板')
      TeachData.StartTime = '请选择时间'
      TeachData.EndTime = '请选择时间'
      TeachData.unit = ''
      TeachData.unitType = ''
      TeachData.unitType_set = ''
      TeachData.education = ''
      TeachData.education_set = ''
      TeachData.ProfessionType = ''
      TeachData.ProfessionType_set = ''
      TeachData.Profession = ''
      TeachData.TeachModus = ''
      TeachData.TeachModus_set = ''
      TeachData.CertificateNumber = ''
      TeachData.Remarks = ''
      TeachData.SecDegree = ''
      TeachData.SecDegree_set = ''
    } else {
      let list = this.$store.state.Teachbg.TeachbgdataList
      console.log('准备数据')
      list.forEach(function (item) {
        if (item.id === ID) {
          TeachData.StartTime = item.StartTime
          TeachData.EndTime = item.EndTime
          TeachData.unit = item.unit
          TeachData.unitType = item.unitType
          TeachData.education = item.education
          TeachData.ProfessionType = item.ProfessionType
          TeachData.Profession = item.Profession
          TeachData.TeachModus = item.TeachModus
          TeachData.CertificateNumber = item.CertificateNumber
          TeachData.DegreeNumber = item.DegreeNumber
          TeachData.Remarks = item.Remarks
          TeachData.SecDegree = item.SecDegree
        }
      })
      let education = this.TeachData.education
      // Modify data page style
      // School Type
      if (education === '大专' || education === '大学' || education === '硕士研究生' || education === '博士研究生' || education === '博士后') {
        this.user_educationselect = true
      } else {
        this.user_educationselect = false
      }
      // Teach Modus
      if (education === '初中及以下' || education === '高中') {
        this.TeachModus_select = false
      } else {
        this.TeachModus_select = true
      }
      // profession type select  DegreeNumber
      if (education === '大学' || education === '硕士研究生' || education === '博士研究生' || education === '博士后') {
        this.ProfessionType_select = true
        this.DegreeNumber_select = true
        this.SecDegree_select = true
      } else {
        this.ProfessionType_select = false
        this.DegreeNumber_select = false
        this.SecDegree_select = false
      }
      // profession write
      if (education === '初中及以下' || education === '高中') {
        this.Profession_selectchu = false
      } else {
        this.Profession_selectchu = true
      }
      // Diploma select
      if (education === '初中及以下' || education === '高中' || education === '职业高中') {
        this.CertificateNumber_select = false
      } else {
        this.CertificateNumber_select = true
      }
    }
  }
}
</script>

<style lang="stylus" scoped>
@import '~@/assets/styles/varibles.styl'
.border-bottom
  &:before
    border-color: $bottomcolor
.Member-nav
  width:100%
  height:$darkHeight
  tex-align:center
  .Member-back
    box-sizing: border-box
    float:left
    width:20%
    height:$darkHeight
    line-height:$darkHeight
    padding-left:.4rem
    font-size:.3rem
    color:#333
    overflow:hidden
  .Member-collection
    box-sizing: border-box
    float:left
    width:60%
    height:$darkHeight
    line-height:$darkHeight
    .Member-msgtitle
      font-weight:bold
      font-size:.4rem
      color:#666
      text-align:center
  .member-rightdel
    box-sizing:border-box
    float:right
    width:20%
    height:1.2rem
    line-height:1.2rem
    text-align:right
    padding-right:.2rem
.job_ul
  margin-top:.1rem
  box-sizing: border-box
  width: 100%
  padding-left: 0.2rem
  .job_li
    height: 0.9rem
    line-height: 0.9rem
    font-size: 0.27rem
    display: flex
    .job_left
     flex:4
     font-size:.3rem
    .job_right
     flex:8
     font-size:.3rem
    .job_right>input
      width:100%
     .job_time
      margin-left:.1rem
      font-size:.4rem
.job_keep
 height:1rem
 display:flex
 justify-content:space-around
 align-items:center
 .job_btn
   box-sizing:border-box
   width:80%
   text-align:center
   padding: 0 0.8rem
   text-align:center
.job_title
 box-sizing: border-box
 margin-top:.2rem
 padding-left: 0.2rem
.job_memark
  box-sizing: border-box
  margin-top:.2rem
  padding-left: 0.2rem
  width: 100%
  height:1.5rem
  color: #999
  background:#fff
.overlayer
  position: fixed
  left: 0
  top: 0
  z-index:10
  width: 100%
  height: 100%
  opacity: 0.5
  background: #000
.levelselect
  width:$selectWidth
  .picker-toolbar-title
    display:flex
    flex-direction: row
    justify-content: space-around
    height: 40px
    line-height: 40px
    font-size: 16px
</style>
