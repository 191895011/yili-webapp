<template>
 <div>
    <ul class="Basic-ul" v-for="item of msgdatalist" :key="item.ID">
        <li class="Basic-li">
            <div class="Basicmsg-left" :class="{ color_error: user.NameAcitve }"><i class="Requiredcolor">*</i>姓名</div>
            <div class="Basicmsg-container">
                <input type="text"
                 v-model.trim="item.Name"
                 placeholder="请在此处输入姓名"/>
            </div>
        </li>
        <li class="Basic-li">
            <div class="Basicmsgicon-left"><i class="Requiredcolor">*</i>国籍</div>
            <div class="Basicmsgicon-container" @click="Get_userCountry">{{item.ContainerName}}</div>
         <!--    <div class="Basicmsgicon-right" @click="Get_userCountry">
                <span class="iconfont BasicIconbg" >&#xe603;</span>
            </div> -->
        </li>
        <li class="Basic-li">
            <div class="Basicmsgicon-left"><i class="Requiredcolor">*</i>证件类型</div>
            <div class="Basicmsgicon-container" @click="User_SelectIdTypesk">{{item.IDType}}</div>
           <!--  <div class="Basicmsgicon-right" @click="User_SelectIdTypesk">
                <span class="iconfont BasicIconbg" >&#xe603;</span>
            </div> -->
        </li>
        <li class="Basic-li">
            <div class="Basicmsg-left" :class="{ color_error: user.IDAcitve}"><i class="Requiredcolor">*</i>证件号码</div>
            <div class="Basicmsg-container">
                <input type="text" v-model.trim="user.ID"
                placeholder="请在此输入证件号码"
                maxlength="18"
                @blur="Get_UserIdTest" />
            </div>
        </li>
        <li class="Basic-li">
            <div class="Basicmsgicon-left" :class="{ color_error: user.RaceAcitve}"><i class="Requiredcolor" :class="{ Requiredshow: user.TypeC }">*</i>民族</div>
            <div class="Basicmsgicon-container" @click="User_Selectracesk">{{item.Race}}</div>
             <!--  <div class="Basicmsgicon-right" @click="User_Selectracesk">
                  <span class="iconfont BasicIconbg" >&#xe603;</span>
              </div> -->
        </li>
        <li class="Basic-li">
            <div class="Basicmsgicon-left" :class="{ color_error: user.SexAcitve}"><i class="Requiredcolor">*</i>性别</div>
            <div class="Basicmsgicon-container" @click="User_Selectsexsk">{{item.SexValue}}</div>
           <!--  <div class="Basicmsgicon-right" @click="User_Selectsexsk">
                <span class="iconfont BasicIconbg" >&#xe603;</span>
            </div> -->
        </li>
        <li class="Basic-li">
            <div class="Basicmsg-left" :class="{ color_error: user.HomeTownPlaceAcitve}"><i class="Requiredcolor" :class="{ Requiredshow: user.TypeC }">*</i>籍贯</div>
            <!-- <div class="Basicmsg-container" @click="showPicker4">{{item.HomeTownPlace}}
              <span class="iconfont Basiciconfont-time">&#xe64c;</span>
            </div> -->
            <div class="Basicmsg-container" @click="showHomeTownPicker">{{item.HomeTownPlace}}
              <!-- <span class="iconfont Basiciconfont-time">&#xe64c;</span> -->
            </div>
        </li>
        <li class="Basic-li">
            <div class="Basicmsg-left" :class="{ color_error: user.BornTimeAcitve}"><i class="Requiredcolor">*</i>出生日期</div>
            <div class="Basicmsg-container" v-show="!user.BornTimeshow">{{item.BornTime}}
             <span class="iconfont Basiciconfont-time">&#xe644;</span>
            </div>
            <div class="Basicmsg-container"  v-show="user.BornTimeshow" @click="setDate">{{item.BornTime}}
             <span class="iconfont Basiciconfont-time">&#xe644;</span>
            </div>
        </li>
      <!--   <li class="Basic-li">
            <div class="Basicmsg-left" :class="{ color_error: user.jobsTimeAcitve}">参加工作时间</div>
            <div class="Basicmsg-container" @click="setDate2">
             {{user.jobsTime}}
             <span class="iconfont Basiciconfont-time">&#xe644;</span>
            </div>
        </li> -->
        <li class="Basic-li">
            <div class="Basicmsgicon-left" :class="{ color_error: user.PoliticalAcitve}"><i class="Requiredcolor" :class="{ Requiredshow: user.TypeC }">*</i>政治面貌</div>
            <div class="Basicmsgicon-container" @click="User_SelectPoliticalsk">{{item.Political}}</div>
          <!--   <div class="Basicmsgicon-right" @click="User_SelectPoliticalsk">
                <span class="iconfont BasicIconbg" >&#xe603;</span>
            </div> -->
        </li>
        <li class="Basic-li">
            <div class="Basicmsg-left" :class="{ color_error: user.HeightAcitve}"><i class="Requiredcolor">*</i>身高(CM)</div>
            <div class="Basicmsg-container">
                <input type="number" v-model.trim="item.Height" placeholder="请在此处输入身高(应在140~200之间)" oninput="if(value.length>5)value=value.slice(0,5)" />
            </div>
        </li>
        <li class="Basic-li">
            <div class="Basicmsgicon-left" :class="{ color_error: user.BloodAcitve}"><i class="Requiredcolor">*</i>血型</div>
            <div class="Basicmsgicon-container" @click="User_SelectBloodsk">{{item.Blood}}</div>
          <!--   <div class="Basicmsgicon-right" @click="User_SelectBloodsk">
                <span class="iconfont BasicIconbg" >&#xe603;</span>
            </div> -->
        </li>
        <li class="Basic-li">
            <div class="Basicmsgicon-left" :class="{ color_error: user.ReligionAcitve}"><i class="Requiredcolor">*</i>宗教信仰</div>
            <div class="Basicmsgicon-container" @click="User_SelectReligionsk">{{item.Religion}}</div>
          <!--   <div class="Basicmsgicon-right" @click="User_SelectReligionsk">
                <span class="iconfont BasicIconbg" >&#xe603;</span>
            </div> -->
        </li>
       <!--  <li class="Basic-li">
            <div class="Basicmsg-left">兴趣爱好</div>
            <div class="Basicmsg-container">
                <input type="text" v-model="item.Savor" placeholder="请在此处输入爱好"/>
            </div>
        </li> -->
        <li class="Basic-li">
            <div class="Basicmsg-left">个人特长</div>
            <div class="Basicmsg-container">
                <input type="text" v-model.trim="item.Specialty" placeholder="请在此处输入特长"/>
            </div>
        </li>
        <li class="Basic-li">
            <div class="Basicmsgicon-left" :class="{ color_error: user.MarriageAcitve}"><i class="Requiredcolor">*</i>婚姻状况</div>
            <div class="Basicmsgicon-container" @click="User_SelectMarriagesk">{{item.Marriage}}</div>
          <!--   <div class="Basicmsgicon-right" @click="User_SelectMarriagesk">
                <span class="iconfont BasicIconbg" >&#xe603;</span>
            </div> -->
        </li>
        <li class="Basic-li">
            <div class="Basicmsgicon-left" :class="{ color_error: user.AccountAcitve}"><i class="Requiredcolor" :class="{ Requiredshow: user.TypeC }">*</i>户口性质</div>
            <div class="Basicmsgicon-container" @click="User_SelectAccountsk">{{item.Account}}</div>
           <!--  <div class="Basicmsgicon-right" @click="User_SelectAccountsk">
                <span class="iconfont BasicIconbg" >&#xe603;</span>
            </div> -->
        </li>
<!--         <li class="Basic-li">
            <div class="Basicmsg-left">原参保地</div>
            <div class="Basicmsg-container">
                <input type="text" v-model="user.Insured" placeholder="请输入原社保缴纳地"/>
            </div>
        </li> -->
      <!--   <li class="Basic-li">
            <div class="Basicmsgicon-left">原发薪周期</div>
            <div class="Basicmsgicon-container" @click="User_SelectWagesk">{{user_Wage}}</div>
        </li> -->
  <!--       <li class="Basic-li">
            <div class="Basicmsgicon-left">预计停保时间</div>
            <div class="Basicmsg-container">
                <input type="text" v-model="user.StopInsured" placeholder="请在此处输入停保时间"/>
            </div>
        </li> -->
        <li class="Basic-overli">
            <div class="Basicmsgicon-overleft" :class="{ color_error: user.onlychildAcitve}"><i class="Requiredcolor">*</i>是否独生子女</div>
            <div class="Basicmsgicon-overcontainer" @click="User_SelectChildsk">{{item.Only_child}}</div>
          <!--   <div class="Basicmsgicon-right" @click="User_SelectChildsk">
                <span class="iconfont BasicIconbg" >&#xe603;</span>
            </div> -->
        </li>
        <li class="Basic-li">
            <div class="Basicmsg-left" :class="{ color_error: user.BirthplaceAcitve}"><i class="Requiredcolor">*</i>出生地点</div>
            <div class="Basicmsg-container" @click="showBornTownPicker">{{item.Birthplace}}
              <!-- <span class="iconfont Basiciconfont-time">&#xe64c;</span> -->
            </div>
        </li>
        <li class="Basic-li">
            <div class="Basicmsg-left" :class="{ color_error: user.AccountplaceAcitve}"><i class="Requiredcolor" :class="{ Requiredshow: user.TypeC }">*</i>户籍住址</div>
            <div class="Basicmsg-container" @click="showAccountTownPicker">{{item.Accountplace}}
              <!-- <span class="iconfont Basiciconfont-time">&#xe64c;</span> -->
            </div>
        </li>
        <li class="Basic-li">
            <div class="Basicmsg-left" :class="{ color_error: user.AccountplaceinputAcitve}"><i class="Requiredcolor" :class="{ Requiredshow: user.TypeC }">*</i>详细地址</div>
            <div class="Basicmsg-container" >
                <input type="text" v-model.trim="item.Accountplaceinput" placeholder="精确到门牌号，农村地址具体到村"/>
            </div>
        </li>
        <li class="Basic-li">
            <div class="Basicmsg-left" :class="{ color_error: user.FamilyPlaceAcitve}"><i class="Requiredcolor" v-show="!user.TypeA">*</i>家庭住址</div>
            <div class="Basicmsg-container" @click="showFamilyTownPicker">{{item.FamilyPlace}}
              <!-- <span class="iconfont Basiciconfont-time">&#xe64c;</span> -->
            </div>
        </li>
        <li class="Basic-li">
            <div class="Basicmsg-left" :class="{ color_error: user.FamilyPlaceinputAcitve}"><i class="Requiredcolor" v-show="!user.TypeA">*</i>详细地址</div>
            <div class="Basicmsg-container">
                <input type="text" v-model.trim="item.FamilyPlaceinput" placeholder="精确到门牌号，农村地址具体到村"/>
            </div>
        </li>
        <li class="Basic-li">
            <div class="Basicmsg-left" :class="{ color_error: user.NowPlaceAcitve}"><i class="Requiredcolor">*</i>现住址</div>
            <div class="Basicmsg-container" @click="showNowTownPicker">{{item.NowPlace}}
              <!-- <span class="iconfont Basiciconfont-time">&#xe64c;</span> -->
            </div>
        </li>
        <li class="Basic-li">
            <div class="Basicmsg-left" :class="{ color_error: user.NowPlaceinputAcitve}"><i class="Requiredcolor">*</i>现详细地址</div>
            <div class="Basicmsg-container">
                <input type="text" v-model.trim="item.NowPlaceinput" value="" placeholder="精确到门牌号，农村地址具体到村"/>
            </div>
        </li>
        <li class="Basic-li">
          <mt-button type="primary" size="large" @click="keep_usermsg">保存</mt-button>
        </li>
    </ul>
    <!--籍贯-->
<!--     <awesome-picker
      ref="picker4"
      :textTitle="picker4.textTitle"
      :data="picker4.data"
      :anchor="picker4.anchor"
      :colorConfirm="picker4.areaconbg"
      :colorCancel="picker4.areaconbg"
      @confirm="handlePicker4Confirm">
    </awesome-picker> -->
    <!--出生地点-->
<!--     <awesome-picker
      ref="picker5"
      :textTitle="picker5.textTitle"
      :data="picker5.data"
      :anchor="picker5.anchor"
      :colorConfirm="picker5.areaconbg"
      :colorCancel="picker5.areaconbg"
      @confirm="handlePicker5Confirm">
    </awesome-picker> -->
  <!--   <awesome-picker
      ref="picker6"
      :textTitle="picker6.textTitle"
      :data="picker6.data"
      :anchor="picker6.anchor"
      :colorConfirm="picker6.areaconbg"
      :colorCancel="picker6.areaconbg"
      @confirm="handlePicker6Confirm">
    </awesome-picker> -->
<!--     <awesome-picker
      ref="picker7"
      :textTitle="picker7.textTitle"
      :data="picker7.data"
      :anchor="picker7.anchor"
      :colorConfirm="picker7.areaconbg"
      :colorCancel="picker7.areaconbg"
      @confirm="handlePicker7Confirm">
    </awesome-picker> -->
    <!-- <awesome-picker
      ref="picker8"
      :textTitle="picker8.textTitle"
      :data="picker8.data"
      :anchor="picker8.anchor"
      :colorConfirm="picker8.areaconbg"
      :colorCancel="picker8.areaconbg"
      @confirm="handlePicker8Confirm">
    </awesome-picker> -->
    <!--性别-->
    <mt-popup
          v-model="sexVisible"
          position="bottom"
          popup-transition="popup-fade">
            <mt-picker :slots="sexslots" @change="onValuessexChange" value-key="name" class="levelselect" showToolbar>
                 <div class="picker-toolbar-title">
                     <div class="usi-btn-cancel" @click="User_Selectsexsk">
                        取消
                     </div>
                     <div>
                     </div>
                     <div class="usi-btn-sure" @click="User_SelectsexSure">
                       确定
                     </div>
                  </div>
           </mt-picker>
    </mt-popup>
    <!--证件类型-->
     <mt-popup
          v-model="IdTypeVisible"
          position="bottom"
          popup-transition="popup-fade">
            <mt-picker :slots="IdTypeslots" @change="onValuesIdTypeChange" value-key="name" class="levelselect" showToolbar>
                 <div class="picker-toolbar-title">
                     <div class="usi-btn-cancel" @click="User_SelectIdTypesk">
                        取消
                     </div>
                     <div>
                     </div>
                     <div class="usi-btn-sure" @click="User_SelectIdTypeSure">
                       确定
                     </div>
                  </div>
           </mt-picker>
    </mt-popup>
    <!--民族-->
    <mt-popup
          v-model="raceVisible"
          position="bottom"
          popup-transition="popup-fade">
            <mt-picker :slots="raceslots" @change="onValuesraceChange" value-key="name" class="levelselect" showToolbar>
                 <div class="picker-toolbar-title">
                     <div class="usi-btn-cancel" @click="User_Selectracesk">
                        取消
                     </div>
                     <div>
                     </div>
                     <div class="usi-btn-sure" @click="User_SelectraceSure">
                       确定
                     </div>
                  </div>
           </mt-picker>
    </mt-popup>
    <!--政治面貌-->
    <mt-popup
          v-model="PoliticalVisible"
          position="bottom"
          popup-transition="popup-fade">
            <mt-picker :slots="Politicalslots" @change="onValuesPoliticalChange" value-key="name" class="levelselect" showToolbar>
                 <div class="picker-toolbar-title">
                     <div class="usi-btn-cancel" @click="User_SelectPoliticalsk">
                        取消
                     </div>
                     <div>
                     </div>
                     <div class="usi-btn-sure" @click="User_SelectPoliticalSure">
                       确定
                     </div>
                  </div>
           </mt-picker>
    </mt-popup>
    <!--血型-->
     <mt-popup
          v-model="BloodVisible"
          position="bottom"
          popup-transition="popup-fade">
            <mt-picker :slots="Bloodslots" @change="onValuesBloodChange" value-key="name" class="levelselect" showToolbar>
                 <div class="picker-toolbar-title">
                     <div class="usi-btn-cancel" @click="User_SelectBloodsk">
                        取消
                     </div>
                     <div>
                     </div>
                     <div class="usi-btn-sure" @click="User_SelectBloodSure">
                       确定
                     </div>
                  </div>
           </mt-picker>
    </mt-popup>
    <!--宗教信仰-->
    <mt-popup
          v-model="ReligionVisible"
          position="bottom"
          popup-transition="popup-fade">
            <mt-picker :slots="Religionslots" @change="onValuesReligionChange" value-key="name" class="levelselect" showToolbar>
                 <div class="picker-toolbar-title">
                     <div class="usi-btn-cancel" @click="User_SelectReligionsk">
                        取消
                     </div>
                     <div>
                     </div>
                     <div class="usi-btn-sure" @click="User_SelectReligionSure">
                       确定
                     </div>
                  </div>
           </mt-picker>
    </mt-popup>
    <!--婚姻状况-->
    <mt-popup
          v-model="MarriageVisible"
          position="bottom"
          popup-transition="popup-fade">
            <mt-picker :slots="Marriageslots" @change="onValuesMarriageChange" value-key="name" class="levelselect" showToolbar>
                 <div class="picker-toolbar-title">
                     <div class="usi-btn-cancel" @click="User_SelectMarriagesk">
                        取消
                     </div>
                     <div>
                     </div>
                     <div class="usi-btn-sure" @click="User_SelectMarriageSure">
                       确定
                     </div>
                  </div>
           </mt-picker>
    </mt-popup>
    <!--户口性质-->
    <mt-popup
          v-model="AccountVisible"
          position="bottom"
          popup-transition="popup-fade">
            <mt-picker :slots="Accountslots" @change="onValuesAccountChange" value-key="name" class="levelselect" showToolbar>
                 <div class="picker-toolbar-title">
                     <div class="usi-btn-cancel" @click="User_SelectAccountsk">
                        取消
                     </div>
                     <div>
                     </div>
                     <div class="usi-btn-sure" @click="User_SelectAccountSure">
                       确定
                     </div>
                  </div>
           </mt-picker>
    </mt-popup>
  <!--发薪周期-->
    <mt-popup
          v-model="WageVisible"
          position="bottom"
          popup-transition="popup-fade">
            <mt-picker :slots="Wageslots" @change="onValuesWageChange"  class="levelselect" showToolbar>
                 <div class="picker-toolbar-title">
                     <div class="usi-btn-cancel" @click="User_SelectWagesk">
                        取消
                     </div>
                     <div>
                     </div>
                     <div class="usi-btn-sure" @click="User_SelectWageSure">
                       确定
                     </div>
                  </div>
           </mt-picker>
    </mt-popup>
  <!--独生子女-->
    <mt-popup
          v-model="ChildVisible"
          position="bottom"
          popup-transition="popup-fade">
            <mt-picker :slots="Childslots" @change="onValuesChildChange"  value-key="name" class="levelselect" showToolbar>
                 <div class="picker-toolbar-title">
                     <div class="usi-btn-cancel" @click="User_SelectChildsk">
                        取消
                     </div>
                     <div>
                     </div>
                     <div class="usi-btn-sure" @click="User_SelectChildSure">
                       确定
                     </div>
                  </div>
           </mt-picker>
    </mt-popup>
     <!--测试地区 后台数据  籍贯demo-->
    <mt-popup
        v-model="user.HomeTownPlaceShow"
        position="bottom"
        popup-transition="popup-fade">
        <mt-picker
          class="levelselect"
          :slots="HomeTownSlots"
          valueKey="value"
          :visibleItemCount ="5"
          @change="HomeTownChange"
          :itemHeight="40"
          showToolbar>
          <div class="picker-toolbar-title">
               <div class="usi-btn-cancel" @click="showHomeTownPicker">
                  取消
               </div>
               <div>
               </div>
               <div class="usi-btn-sure" @click="HomeTownPickerSure">
                 确定
               </div>
            </div>
        </mt-picker>
    </mt-popup>
    <!--出生地点-->
    <mt-popup
        v-model="user.BirthplaceShow"
        position="bottom"
        popup-transition="popup-fade">
        <mt-picker
          class="levelselect"
          :slots="BornTownSlots"
          valueKey="value"
          :visibleItemCount ="5"
          @change="BornTownChange"
          :itemHeight="40"
          showToolbar>
          <div class="picker-toolbar-title">
               <div class="usi-btn-cancel" @click="showBornTownPicker">
                  取消
               </div>
               <div>
               </div>
               <div class="usi-btn-sure" @click="BornTownPickerSure">
                 确定
               </div>
            </div>
        </mt-picker>
    </mt-popup>
     <!--户籍住址-->
    <mt-popup
        v-model="user.AccountplaceShow"
        position="bottom"
        popup-transition="popup-fade">
        <mt-picker
          class="levelselect"
          :slots="AccountTownSlots"
          valueKey="value"
          :visibleItemCount ="5"
          @change="AccountTownChange"
          :itemHeight="40"
          showToolbar>
          <div class="picker-toolbar-title">
               <div class="usi-btn-cancel" @click="showAccountTownPicker">
                  取消
               </div>
               <div>
               </div>
               <div class="usi-btn-sure" @click="AccountTownPickerSure">
                 确定
               </div>
            </div>
        </mt-picker>
    </mt-popup>
     <!--家庭住址-->
    <mt-popup
        v-model="user.FamilyPlaceShow"
        position="bottom"
        popup-transition="popup-fade">
        <mt-picker
          class="levelselect"
          :slots="FamilyTownSlots"
          valueKey="value"
          :visibleItemCount ="5"
          @change=" FamilyTownChange"
          :itemHeight="40"
          showToolbar>
          <div class="picker-toolbar-title">
               <div class="usi-btn-cancel" @click="showFamilyTownPicker">
                  取消
               </div>
               <div>
               </div>
               <div class="usi-btn-sure" @click="FamilyTownPickerSure">
                 确定
               </div>
            </div>
        </mt-picker>
    </mt-popup>
    <!--现住址-->
     <mt-popup
        v-model="user.NowPlaceShow"
        position="bottom"
        popup-transition="popup-fade">
        <mt-picker
          class="levelselect"
          :slots="NowTownSlots"
          valueKey="value"
          :visibleItemCount ="5"
          @change=" NowTownChange"
          :itemHeight="40"
          showToolbar>
          <div class="picker-toolbar-title">
             <div class="usi-btn-cancel" @click="showNowTownPicker">
                取消
             </div>
             <div>
             </div>
             <div class="usi-btn-sure" @click="NowTownPickerSure">
               确定
             </div>
          </div>
        </mt-picker>
    </mt-popup>
   <div class="overlayer" @touchmove.prevent v-show="Basic_opcatiybg">
   </div>
 </div>
</template>
<script>
import Vue from 'vue'
import areaData from '@/assets/js/area'
import AwesomePicker from 'vue-awesome-picker'
import { mapState } from 'vuex'
import global_ from '@/pages/Global/global'
import { MessageBox } from 'mint-ui'
import ValueList from '@/assets/js/valuelist'
Vue.use(AwesomePicker)

export default {
  name: 'MemberBasic',
  data () {
    return {
      user: {
        Name: '',
        NameAcitve: false,
        testID: true,
        ID: this.$store.state.usermsglist.msgdatalist[0].ID,
        SexAcitve: false,
        RaceAcitve: false,
        IDAcitve: false,
        BornTime: '请选择日期',
        BornTimeAcitve: false,
        BornTimeshow: true,
        PoliticalAcitve: false,
        jobsTime: '2018-01-01',
        jobsTimeAcitve: false,
        Height: '',
        HeightAcitve: false,
        BloodAcitve: false,
        ReligionAcitve: false,
        savor: '',
        Specialty: '',
        MarriageAcitve: false,
        AccountAcitve: false,
        onlychildAcitve: false,
        Insured: '',
        StopInsured: '',
        HomeTownPlace: '请选择地区',
        HomeTownPlaceShow: false,
        HomeTownPlaceAcitve: false,
        HomeTownPlace_set: '',
        HomeTownPlaceArr: '',
        HomeTownPlaceArr_set: ['110000', '110000', '110101'],
        Birthplace: '请选择地区',
        Birthplace_set: '',
        BirthplaceShow: false,
        BirthplaceAcitve: false,
        BirthplaceArr: '',
        BirthplaceArr_set: ['110000', '110000', '110101'],
        Accountplace: '请选择地区',
        Accountplace_set: '',
        AccountplaceShow: false,
        AccountplaceAcitve: false,
        AccountplaceArr: '',
        AccountplaceArr_set: ['110000', '110000', '110101'],
        Accountplaceinput: '',
        AccountplaceinputAcitve: false,
        FamilyPlace: '请选择地区',
        FamilyPlace_set: '',
        FamilyPlaceShow: false,
        FamilyPlaceAcitve: false,
        FamilyPlaceArr: '',
        FamilyPlaceArr_set: ['110000', '110000', '110101'],
        FamilyPlaceinput: '',
        FamilyPlaceinputAcitve: false,
        NowPlace: '请选择地区',
        NowPlace_set: '',
        NowPlaceShow: false,
        NowPlaceAcitve: false,
        NowPlaceArr: '',
        NowPlaceArr_set: ['110000', '110000', '110101'],
        NowPlaceinput: '',
        NowPlaceinputAcitve: false,
        TypeC: false,
        TypeA: this.$store.state.TYPEA
      },
      AreaList: this.$store.state.CityList, // 地区数据
      SexValue: this.$store.state.usersex,
      sexVisible: false,
      SexValue_set: '',
      SexValuecode_set: '',
      user_IdTypeValue: '身份证',
      IdTypeVisible: false,
      user_IdTypeValue_set: '',
      user_IdTypeValuecode_set: 1,
      User_Race: '',
      raceVisible: false,
      User_Race_set: '',
      User_Racecode_set: '',
      user_Political: '',
      PoliticalVisible: false,
      user_Political_set: '',
      user_Politicalcode_set: '',
      user_Blood: '',
      BloodVisible: false,
      user_Blood_set: '',
      user_Bloodcode_set: '',
      user_Religion: '',
      ReligionVisible: false,
      user_Religion_set: '',
      user_Religioncode_set: '',
      user_Marriage: '',
      MarriageVisible: false,
      user_Marriage_set: '',
      user_Marriagecode_set: '',
      user_Account: '',
      AccountVisible: false,
      user_Account_set: '',
      user_Accountcode_set: '',
      user_Wage: '当月发当月',
      WageVisible: false,
      user_Wage_set: '',
      user_child: this.$store.state.userone,
      ChildVisible: false,
      user_child_set: '',
      user_childcode_set: '',
      msg: '../static/images/u236.png',
      Basic_opcatiybg: false,
      country_value: '中国',
      AREALIST: '',
      // picker4: {
      //   anchor: [],
      //   textTitle: '',
      //   areaconbg: '#000',
      //   data: areaData
      // },
      // 地区选择数据
      HomeTownSlots: [
        {
          flex: 1,
          values: this.getProvinceArr(this.$store.state.CityList), // 省份数组
          textAlign: 'center'
        },
        {
          divider: true,
          content: ''
        },
        {
          flex: 1,
          values: this.getCityArr(this.$store.state.CityList, '北京'),
          textAlign: 'center'
        },
        {
          divider: true,
          content: ''
        },
        {
          flex: 1,
          values: this.getCountyArr(this.$store.state.CityList, '北京', '北京'),
          textAlign: 'center'
        }
      ],
      // picker5: {
      //   anchor: [],
      //   textTitle: '',
      //   areaconbg: '#000',
      //   data: areaData
      // },
      BornTownSlots: [
        {
          flex: 1,
          values: this.getProvinceArr(this.$store.state.CityList), // 省份数组
          textAlign: 'center'
        },
        {
          divider: true,
          content: ''
        },
        {
          flex: 1,
          values: this.getCityArr(this.$store.state.CityList, '北京'),
          textAlign: 'center'
        },
        {
          divider: true,
          content: ''
        },
        {
          flex: 1,
          values: this.getCountyArr(this.$store.state.CityList, '北京', '北京'),
          textAlign: 'center'
        }
      ],
      // picker6: {
      //   anchor: [],
      //   textTitle: '',
      //   areaconbg: '#000',
      //   data: areaData
      // },
      AccountTownSlots: [
        {
          flex: 1,
          values: this.getProvinceArr(this.$store.state.CityList), // 省份数组
          textAlign: 'center'
        },
        {
          divider: true,
          content: ''
        },
        {
          flex: 1,
          values: this.getCityArr(this.$store.state.CityList, '北京'),
          textAlign: 'center'
        },
        {
          divider: true,
          content: ''
        },
        {
          flex: 1,
          values: this.getCountyArr(this.$store.state.CityList, '北京', '北京'),
          textAlign: 'center'
        }
      ],
      // picker7: {
      //   anchor: [],
      //   textTitle: '',
      //   areaconbg: '#000',
      //   data: areaData
      // },
      FamilyTownSlots: [
        {
          flex: 1,
          values: this.getProvinceArr(this.$store.state.CityList), // 省份数组
          textAlign: 'center'
        },
        {
          divider: true,
          content: ''
        },
        {
          flex: 1,
          values: this.getCityArr(this.$store.state.CityList, '北京'),
          textAlign: 'center'
        },
        {
          divider: true,
          content: ''
        },
        {
          flex: 1,
          values: this.getCountyArr(this.$store.state.CityList, '北京', '北京'),
          textAlign: 'center'
        }
      ],
      // picker8: {
      //   anchor: [],
      //   textTitle: '',
      //   areaconbg: '#000',
      //   data: areaData
      // },
      NowTownSlots: [
        {
          flex: 1,
          values: this.getProvinceArr(this.$store.state.CityList), // 省份数组
          textAlign: 'center'
        },
        {
          divider: true,
          content: ''
        },
        {
          flex: 1,
          values: this.getCityArr(this.$store.state.CityList, '北京'),
          textAlign: 'center'
        },
        {
          divider: true,
          content: ''
        },
        {
          flex: 1,
          values: this.getCountyArr(this.$store.state.CityList, '北京', '北京'),
          textAlign: 'center'
        }
      ],
      sexslots: [
        {
          flex: 1,
          values: ValueList.SexList,
          textAlign: 'center'
        }
      ],
      IdTypeslots: [
        {
          flex: 1,
          values: ValueList.IDTypeList,
          textAlign: 'center'
        }
      ],
      raceslots: [
        {
          flex: 1,
          values: ValueList.RaceList,
          textAlign: 'center'
        }
      ],
      Politicalslots: [
        {
          flex: 1,
          values: ValueList.PoliticalList,
          textAlign: 'center'
        }
      ],
      Bloodslots: [
        {
          flex: 1,
          values: ValueList.BloodList,
          textAlign: 'center'
        }
      ],
      Religionslots: [
        {
          flex: 1,
          values: ValueList.ReligionList,
          textAlign: 'center'
        }
      ],
      Marriageslots: [
        {
          flex: 1,
          values: ValueList.MarriageList,
          textAlign: 'center'
        }
      ],
      Accountslots: [
        {
          flex: 1,
          values: ValueList.AccountList,
          textAlign: 'center'
        }
      ],
      Wageslots: [
        {
          flex: 1,
          values: ['当月发当月', '次月发上月', '无'],
          textAlign: 'center'
        }
      ],
      Childslots: [
        {
          flex: 1,
          values: ValueList.NoList,
          textAlign: 'center'
        }
      ]
    }
  },
  methods: {
    // user select sex
    User_Selectsexsk () {
      this.sexVisible = !this.sexVisible
    },
    User_SelectsexSure () {
      if (this.SexValue_set === '') {
        this.SexValue_set = ValueList.SexList[0].name
        this.SexValuecode_set = ValueList.SexList[0].code
      }
      this.msgdatalist[0].SexValue = this.SexValue_set
      this.sexVisible = !this.sexVisible
      console.log('性别类型' + this.SexValuecode_set)
    },
    onValuessexChange (picker, values) {
      this.SexValue_set = values[0].name
      this.SexValuecode_set = values[0].code
    },
    // user select IDtype
    User_SelectIdTypesk () {
      this.IdTypeVisible = !this.IdTypeVisible
    },
    User_SelectIdTypeSure () {
      this.msgdatalist[0].IDType = this.user_IdTypeValue_set
      this.IdTypeVisible = !this.IdTypeVisible
      console.log('证件类型' + this.user_IdTypeValuecode_set)
    },
    onValuesIdTypeChange (picker, values) {
      this.user_IdTypeValue_set = values[0].name
      this.user_IdTypeValuecode_set = values[0].code
    },
    // user select race
    User_Selectracesk () {
      this.raceVisible = !this.raceVisible
    },
    User_SelectraceSure () {
      if (this.User_Race_set === '') {
        this.User_Race_set = ValueList.RaceList[0].name
        this.User_Racecode_set = ValueList.RaceList[0].code
      }
      this.msgdatalist[0].Race = this.User_Race_set
      this.raceVisible = !this.raceVisible
      console.log('民族类型' + this.User_Racecode_set)
    },
    onValuesraceChange (picker, values) {
      this.User_Race_set = values[0].name
      this.User_Racecode_set = values[0].code
    },
    // user select political
    User_SelectPoliticalsk () {
      this.PoliticalVisible = !this.PoliticalVisible
    },
    User_SelectPoliticalSure () {
      if (this.user_Political_set === '') {
        this.user_Political_set = ValueList.PoliticalList[0].name
        this.user_Politicalcode_set = ValueList.PoliticalList[0].code
      }
      this.msgdatalist[0].Political = this.user_Political_set
      this.PoliticalVisible = !this.PoliticalVisible
      console.log('政治面貌类型' + this.user_Politicalcode_set)
    },
    onValuesPoliticalChange (picker, values) {
      this.user_Political_set = values[0].name
      this.user_Politicalcode_set = values[0].code
    },
    // user select Relign
    User_SelectReligionsk () {
      this.ReligionVisible = !this.ReligionVisible
    },
    User_SelectReligionSure () {
      if (this.user_Religion_set === '') {
        this.user_Religion_set = ValueList.ReligionList[0].name
        this.user_Religioncode_set = ValueList.ReligionList[0].code
      }
      this.msgdatalist[0].Religion = this.user_Religion_set
      this.ReligionVisible = !this.ReligionVisible
      console.log('宗教信仰' + this.user_Religioncode_set)
    },
    onValuesReligionChange (picker, values) {
      this.user_Religion_set = values[0].name
      this.user_Religioncode_set = values[0].code
    },
    // user select blood
    User_SelectBloodsk () {
      this.BloodVisible = !this.BloodVisible
    },
    User_SelectBloodSure () {
      if (this.user_Blood_set === '') {
        this.user_Blood_set = ValueList.BloodList[0].name
        this.user_Bloodcode_set = ValueList.BloodList[0].code
      }
      this.msgdatalist[0].Blood = this.user_Blood_set
      this.BloodVisible = !this.BloodVisible
      console.log('血型类别' + this.user_Bloodcode_set)
    },
    onValuesBloodChange (picker, values) {
      this.user_Blood_set = values[0].name
      this.user_Bloodcode_set = values[0].code
    },
    // user select marriage state
    User_SelectMarriagesk () {
      this.MarriageVisible = !this.MarriageVisible
    },
    User_SelectMarriageSure () {
      if (this.user_Marriage_set === '') {
        this.user_Marriage_set = ValueList.MarriageList[0].name
        this.user_Marriagecode_set = ValueList.MarriageList[0].code
      }
      this.msgdatalist[0].Marriage = this.user_Marriage_set
      this.MarriageVisible = !this.MarriageVisible
      console.log('婚姻类型' + this.user_Marriagecode_set)
    },
    onValuesMarriageChange (picker, values) {
      this.user_Marriage_set = values[0].name
      this.user_Marriagecode_set = values[0].code
    },
    // user select account
    User_SelectAccountsk () {
      this.AccountVisible = !this.AccountVisible
    },
    User_SelectAccountSure () {
      if (this.user_Account_set === '') {
        this.user_Account_set = ValueList.AccountList[0].name
        this.user_Accountcode_set = ValueList.AccountList[0].code
      }
      this.msgdatalist[0].Account = this.user_Account_set
      this.AccountVisible = !this.AccountVisible
      console.log('户口性质' + this.user_Accountcode_set)
    },
    onValuesAccountChange (picker, values) {
      this.user_Account_set = values[0].name
      this.user_Accountcode_set = values[0].code
    },
    // user select  wage
    User_SelectWagesk () {
      this.WageVisible = !this.WageVisible
    },
    User_SelectWageSure () {
      this.user_Wage = this.user_Wage_set
      this.WageVisible = !this.WageVisible
    },
    onValuesWageChange (picker, values) {
      this.user_Wage_set = values[0]
      if (values[0] > values[1]) {
        picker.setSlotValue(1, values[0])
      }
    },
    // user select onlychild
    User_SelectChildsk () {
      this.ChildVisible = !this.ChildVisible
    },
    User_SelectChildSure () {
      if (this.user_child_set === '') {
        this.user_child_set = ValueList.NoList[0].name
        this.user_child_set = ValueList.NoList[0].code
      }
      this.msgdatalist[0].Only_child = this.user_child_set
      this.ChildVisible = !this.ChildVisible
      console.log('独生子女类型' + this.user_childcode_set)
    },
    onValuesChildChange (picker, values) {
      this.user_child_set = values[0].name
      this.user_childcode_set = values[0].code
    },
    // to country list
    Get_userCountry () {
      // this.$router.push({
      //   path: `/container`
      // })
    },
    // userID test
    Get_UserIdTest (e) {
      if (this.user_IdTypeValue !== '身份证') {
        return
      }
      let thisValue = e.currentTarget.value
      let VueThis = this
      this.user.ID = thisValue
      this.user.testID = VueThis.$options.methods.ChinaIdChecker(thisValue)
      if (this.user.testID) {
        this.$options.methods.User_IdwrtData(VueThis)
      } else {
        this.user.BornTimeshow = true
      }
    },
    User_IdwrtData (data) {
      // data.SexValue = this.USERsexName
      // let USER_TIME = this.USERyearStr + '-' + this.USERmonthStr + '-' + this.USERdayStr
      // data.user.BornTime = USER_TIME
      // data.pickerValue = USER_TIME
      data.msgdatalist[0].SexValue = this.USERsexName
      let USER_TIME = this.USERyearStr + '-' + this.USERmonthStr + '-' + this.USERdayStr
      data.msgdatalist[0].BornTime = USER_TIME
      data.user.BornTimeshow = false
    },
    ChinaIdChecker (id) {
      this.isOK = false
      this.error = ''
      if (!id || typeof (id) !== 'string' || id === '111111111111111') {
        this.error = '输入不是15位或者18位有效字符串'
        return false
      }
      if (id.length !== 15 && id.length !== 18) {
        this.error = '输入不是15位或者18位有效字符串'
        return false
      }
      if (!id.match(/^[0-9]{15}$/) && !id.match(/^[0-9]{17}[0-9xX]$/)) {
        this.error = '输入不是15位或者18位有效字符串'
        return false
      }
      let area = {
        '10': '北京',
        '11': '天津',
        '13': '河北',
        '14': '山西',
        '15': '内蒙古',
        '21': '辽宁',
        '22': '吉林',
        '23': '黑龙江',
        '31': '上海',
        '32': '江苏',
        '33': '浙江',
        '34': '安徽',
        '35': '福建',
        '36': '江西',
        '37': '山东',
        '41': '河南',
        '42': '湖北',
        '43': '湖南',
        '44': '广东',
        '45': '广西',
        '46': '海南',
        '50': '重庆',
        '51': '四川',
        '52': '贵州',
        '53': '云南',
        '54': '西藏',
        '61': '陕西',
        '62': '甘肃',
        '63': '青海',
        '64': '宁夏',
        '65': '新疆',
        '71': '台湾',
        '81': '香港',
        '82': '澳门',
        '91': '国外'
      }
      this.areaName = area[id.substr(0, 2)]
      if (!this.areaName) {
        this.error = '前2位不是有效的行政区划代码'
        return false
      }
      if (id.length === 15) {
        this.year = parseInt(id.substr(6, 2))
        this.month = parseInt(id.substr(8, 2))
        this.day = parseInt(id.substr(10, 2))
      } else {
        this.year = parseInt(id.substr(6, 4))
        this.month = parseInt(id.substr(10, 2))
        this.day = parseInt(id.substr(12, 2))
      }
      this.error = '出生日期不正确'
      if (this.month > 12) {
        return false
      }
      if (this.day > 31) {
        return false
      }
      // February can't be greater than 29 (leap year calculation comes later)
      if ((this.month === 2) && (this.day > 29)) {
        return false
      }
      // check for months with only 30 days
      if ((this.month === 4) || (this.month === 6) || (this.month === 9) || (this.month === 11)) {
        if (this.day > 30) {
          return false
        }
      }
      // if 2-digit year, use 50 as a pivot date
      if (this.year < 100) {
        this.year += 1900
      }
      if (this.year > 9999) {
        return false
      }
      // check for leap year if the month and day is Feb 29
      if ((this.month === 2) && (this.day === 29)) {
        var div4 = this.year % 4
        var div100 = this.year % 100
        var div400 = this.year % 400
        // if not divisible by 4, then not a leap year so Feb 29 is invalid
        if (div4 !== 0) {
          return false
        }
        // at this point, year is divisible by 4. So if year is divisible by
        // 100 and not 400, then it's not a leap year so Feb 29 is invalid
        if ((div100 === 0) && (div400 !== 0)) {
          return false
        }
      }
      this.USERyearStr = '' + this.year
      this.USERmonthStr = (this.month < 10 ? '0' : '') + this.month
      this.USERdayStr = (this.day < 10 ? '0' : '') + this.day
      // date is valid
      let birthDay = new Date(this.year, this.month - 1, this.day)
      if (birthDay - new Date() >= 0 || birthDay - new Date(1850, 1, 1) <= 0) {
        return false
      }
      this.error = ''
      let lastNum = id.length === 15 ? id.substr(14, 1) : id.substr(16, 1)
      this.sex = (lastNum === '1' || lastNum === '3' || lastNum === '5' || lastNum === '7' || lastNum === '9') ? '1' : '0'
      this.USERsexName = this.sex === '1' ? '男' : '女'
      if (id.length === 15) {
        this.isOK = true
        return true
      }
      let getLastValidationLetter = function (str) {
        let strArray = new Array(17)
        let Wi = [7, 9, 10, 5, 8, 4, 2, 1, 6, 3, 7, 9, 10, 5, 8, 4, 2, 1]
        let Y = ['1', '0', 'X', '9', '8', '7', '6', '5', '4', '3', '2']
        let S = 0
        let jym = 0
        for (let i = 16; i >= 0; i -= 1) {
          strArray[i] = Number(str.charAt(i))
        }
        for (let j = 16; j >= 0; j -= 1) {
          S += strArray[j] * Wi[j]
        }
        jym = S % 11
        return Y[jym]
      }
      if (id.substr(17, 1) !== getLastValidationLetter(id.substr(0, 17))) {
        this.error = '18位身份证编码最后一位校验码不正确'
        return false
      }
      this.isOK = true
      return true
    },
    // user select born time
    setDate () {
      this.$picker.show({
        type: 'datePicker',
        endTime: '2280-02-11',
        startTime: '1900-01-01',
        onOk: (date) => {
          this.msgdatalist[0].BornTime = date
        }
      })
    },
    // user select jobtime
    setDate2 () {
      this.$picker.show({
        type: 'datePicker',
        endTime: '2280-02-11',
        startTime: '1900-01-01',
        onOk: (e) => {
          this.user.jobsTime = e
        }
      })
    },
    // showPicker4 () {
    //   this.$refs.picker4.show()
    //   console.log(this.AREALIST)
    // },
    // handlePicker4Confirm (v) {
    //   this.picker4.anchor = v
    //   this.value = v ? JSON.stringify(v) : null
    //   // console.log('籍贯id是否正确' + JSON.stringify(this.picker4))
    //   let objarea = JSON.parse(this.value)
    //   this.msgdatalist[0].HomeTownPlace = objarea[0].value + ' ' + objarea[1].value + ' ' + objarea[2].value
    // },
    // 籍贯选择地区
    showHomeTownPicker () {
      this.user.HomeTownPlaceShow = !this.user.HomeTownPlaceShow
    },
    // 点击 确定
    HomeTownPickerSure () {
      this.user.HomeTownPlaceShow = !this.user.HomeTownPlaceShow
      if (this.user.HomeTownPlace_set === '') {
        this.user.HomeTownPlace_set = '北京北京东城区'
        this.user.HomeTownPlaceArr_set = ['110000', '110000', '110101']
      }
      this.msgdatalist[0].HomeTownPlace = this.user.HomeTownPlace_set
      this.msgdatalist[0].HomeTownPlaceArr = this.user.HomeTownPlaceArr_set
      console.log('地区' + this.user.HomeTownPlaceArr_set)
      console.log('籍贯地区' + this.msgdatalist[0].HomeTownPlaceArr)
    },
    // 改变地区
    HomeTownChange (picker, values) {
      // console.table(values)
      this.user.HomeTownPlace_set = values[0]['value'] + values[1]['value'] + values[2]['value']
      console.log(this.user.HomeTownPlace_set)
      this.user.HomeTownPlaceArr_set[0] = values[0]['id']
      this.user.HomeTownPlaceArr_set[1] = values[1]['id']
      this.user.HomeTownPlaceArr_set[2] = values[2]['id']
      // 给市、县赋值
      picker.setSlotValues(1, this.getCityArr(this.AreaList, values[0]['value']))
      picker.setSlotValues(2, this.getCountyArr(this.AreaList, values[0]['value'], values[1]['value']))
    },
    // 遍历json，返回省级对象数组
    getProvinceArr (city) {
      let provinceArr = []
      // console.log(city)
      city.forEach(function (item) {
        let obj = {}
        obj.value = item.value
        obj.id = item.id
        provinceArr.push(obj)
      })
      return provinceArr
    },
    // 遍历json，返回市级对象数组
    getCityArr (list, province) {
      // console.log('省:' + province)
      let cityArr = []
      list.forEach(function (item) {
        if (item.value === province) {
          item.cityList.forEach(function (args) {
            let obj = {}
            obj.value = args.value
            obj.id = args.id
            cityArr.push(obj)
          })
        }
      })
      // console.log(cityArr)
      return cityArr
    },
    getCountyArr (list, province, city) {
      let countyArr = []
      // console.log(province)
      // console.log(city)
      list.forEach(function (item) {
        if (item.value === province) {
          item.cityList.forEach(function (args) {
            if (args.value === city) {
              // console.log('三级数据' + city)
              args.areaList.forEach(function (param) {
                let obj = {}
                obj.value = param.value
                obj.id = param.id
                countyArr.push(obj)
              })
            }
          })
        }
      })
      // console.log(countyArr)
      return countyArr
    },
    // showBornPicker5 () {
    //   this.$refs.picker5.show()
    // },
    // handlePicker5Confirm (v) {
    //   this.picker5.anchor = v
    //   this.value = v ? JSON.stringify(v) : null
    //   let objarea = JSON.parse(this.value)
    //   this.msgdatalist[0].Birthplace = objarea[0].value + ' ' + objarea[1].value + ' ' + objarea[2].value
    // },
    // 出生地点选择地区
    showBornTownPicker () {
      this.user.BirthplaceShow = !this.user.BirthplaceShow
    },
    // 点击 确定
    BornTownPickerSure () {
      this.user.BirthplaceShow = !this.user.BirthplaceShow
      if (this.user.Birthplace_set === '') {
        this.user.Birthplace_set = '北京北京东城区'
        this.user.BirthplaceArr_set = ['110000', '110000', '110101']
      }
      this.msgdatalist[0].Birthplace = this.user.Birthplace_set
      this.msgdatalist[0].BirthplaceArr = this.user.BirthplaceArr_set
    },
    // 改变地区
    BornTownChange (picker, values) {
      // console.table(values)
      this.user.Birthplace_set = values[0]['value'] + values[1]['value'] + values[2]['value']
      console.log(this.user.Birthplace_set)
      this.user.BirthplaceArr_set[0] = values[0]['id']
      this.user.BirthplaceArr_set[1] = values[1]['id']
      this.user.BirthplaceArr_set[2] = values[2]['id']
      picker.setSlotValues(1, this.getCityArr(this.AreaList, values[0]['value']))
      picker.setSlotValues(2, this.getCountyArr(this.AreaList, values[0]['value'], values[1]['value']))
    },
    // showAccountPicker6 () {
    //   this.$refs.picker6.show()
    // },
    // handlePicker6Confirm (v) {
    //   this.picker6.anchor = v
    //   this.value = v ? JSON.stringify(v) : null
    //   let objarea = JSON.parse(this.value)
    //   this.msgdatalist[0].Accountplace = objarea[0].value + ' ' + objarea[1].value + ' ' + objarea[2].value
    // },
    // 户籍住址选择地区
    showAccountTownPicker () {
      this.user.AccountplaceShow = !this.user.AccountplaceShow
    },
    // 点击 确定
    AccountTownPickerSure () {
      this.user.AccountplaceShow = !this.user.AccountplaceShow
      if (this.user.Accountplace_set === '') {
        this.user.Accountplace_set = '北京北京东城区'
        this.user.AccountplaceArr_set = ['110000', '110000', '110101']
      }
      this.msgdatalist[0].Accountplace = this.user.Accountplace_set
      this.msgdatalist[0].AccountplaceArr = this.user.AccountplaceArr_set
    },
    // 改变地区
    AccountTownChange (picker, values) {
      // console.table(values)
      this.user.Accountplace_set = values[0]['value'] + values[1]['value'] + values[2]['value']
      console.log(this.user.Accountplace_set)
      this.user.AccountplaceArr_set[0] = values[0]['id']
      this.user.AccountplaceArr_set[1] = values[1]['id']
      this.user.AccountplaceArr_set[2] = values[2]['id']
      picker.setSlotValues(1, this.getCityArr(this.AreaList, values[0]['value']))
      picker.setSlotValues(2, this.getCountyArr(this.AreaList, values[0]['value'], values[1]['value']))
    },
    // showFamilyPicker7 () {
    //   this.$refs.picker7.show()
    // },
    // handlePicker7Confirm (v) {
    //   this.picker7.anchor = v
    //   this.value = v ? JSON.stringify(v) : null
    //   let objarea = JSON.parse(this.value)
    //   this.msgdatalist[0].FamilyPlace = objarea[0].value + ' ' + objarea[1].value + ' ' + objarea[2].value
    // },
    // 家庭住址选择地区
    showFamilyTownPicker () {
      this.user.FamilyPlaceShow = !this.user.FamilyPlaceShow
    },
    // 点击 确定
    FamilyTownPickerSure () {
      this.user.FamilyPlaceShow = !this.user.FamilyPlaceShow
      if (this.user.FamilyPlace_set === '') {
        this.user.FamilyPlace_set = '北京北京东城区'
        this.user.FamilyPlaceArr_set = ['110000', '110000', '110101']
      }
      this.msgdatalist[0].FamilyPlace = this.user.FamilyPlace_set
      this.msgdatalist[0].FamilyPlaceArr = this.user.FamilyPlaceArr_set
    },
    // 改变地区
    FamilyTownChange (picker, values) {
      // console.table(values)
      this.user.FamilyPlace_set = values[0]['value'] + values[1]['value'] + values[2]['value']
      console.log(this.user.FamilyPlace_set)
      this.user.FamilyPlaceArr_set[0] = values[0]['id']
      this.user.FamilyPlaceArr_set[1] = values[1]['id']
      this.user.FamilyPlaceArr_set[2] = values[2]['id']
      picker.setSlotValues(1, this.getCityArr(this.AreaList, values[0]['value']))
      picker.setSlotValues(2, this.getCountyArr(this.AreaList, values[0]['value'], values[1]['value']))
    },
    // showNowPicker8 () {
    //   this.$refs.picker8.show()
    // },
    // handlePicker8Confirm (v) {
    //   this.picker8.anchor = v
    //   this.value = v ? JSON.stringify(v) : null
    //   let objarea = JSON.parse(this.value)
    //   this.msgdatalist[0].NowPlace = objarea[0].value + ' ' + objarea[1].value + ' ' + objarea[2].value
    // },
    // 现住址选择地区
    showNowTownPicker () {
      this.user.NowPlaceShow = !this.user.NowPlaceShow
    },
    // 点击 确定
    NowTownPickerSure () {
      this.user.NowPlaceShow = !this.user.NowPlaceShow
      if (this.user.NowPlace_set === '') {
        this.user.NowPlace_set = '北京北京东城区'
        this.user.NowPlaceArr_set = ['110000', '110000', '110101']
      }
      this.msgdatalist[0].NowPlace = this.user.NowPlace_set
      this.msgdatalist[0].NowPlaceArr = this.user.NowPlaceArr_set
    },
    // 改变地区
    NowTownChange (picker, values) {
      // console.table(values)
      this.user.NowPlace_set = values[0]['value'] + values[1]['value'] + values[2]['value']
      console.log(this.user.FamilyPlace_set)
      this.user.NowPlaceArr_set[0] = values[0]['id']
      this.user.NowPlaceArr_set[1] = values[1]['id']
      this.user.NowPlaceArr_set[2] = values[2]['id']
      picker.setSlotValues(1, this.getCityArr(this.AreaList, values[0]['value']))
      picker.setSlotValues(2, this.getCountyArr(this.AreaList, values[0]['value'], values[1]['value']))
    },
    keep_usermsg () {
      console.log(areaData)
      const user = this.user
      const reg = global_.AddressReg
      const jsGetAge = global_.jsGetAge
      reg.lastIndex = 0
      let msgselect = true
      console.log('看看' + user.TypeA)
      // name not empty
      if (this.msgdatalist[0].Name === '') {
        user.NameAcitve = true
        msgselect = false
      } else {
        user.NameAcitve = false
      }
      // user sex not empty
      if (this.msgdatalist[0].SexValue === '') {
        user.SexAcitve = true
        msgselect = false
      } else {
        user.SexAcitve = false
      }
      // user race not empty
      if (this.msgdatalist[0].Race === '') {
        user.RaceAcitve = true
        msgselect = false
      } else {
        user.RaceAcitve = false
      }
      // user Political not empty
      if (this.msgdatalist[0].Political === '') {
        user.PoliticalAcitve = true
        msgselect = false
      } else {
        user.PoliticalAcitve = false
      }
      // user Political not empty
      if (this.msgdatalist[0].Blood === '') {
        user.BloodAcitve = true
        msgselect = false
      } else {
        user.BloodAcitve = false
      }
      // user Religion not empty
      if (this.msgdatalist[0].Religion === '') {
        user.ReligionAcitve = true
        msgselect = false
      } else {
        user.ReligionAcitve = false
      }
      // user Marriage not empty
      if (this.msgdatalist[0].Marriage === '') {
        user.MarriageAcitve = true
        msgselect = false
      } else {
        user.MarriageAcitve = false
      }
      // user Account not empty
      if (this.msgdatalist[0].Account === '') {
        user.AccountAcitve = true
        msgselect = false
      } else {
        user.AccountAcitve = false
      }
      // user onlychild not empty
      if (this.msgdatalist[0].Only_child === '') {
        user.onlychildAcitve = true
        msgselect = false
      } else {
        user.onlychildAcitve = false
      }
      // userID type
      if (this.msgdatalist[0].IDType === '身份证') {
        let thisValue = this.user.ID
        this.user.testID = this.$options.methods.ChinaIdChecker(thisValue)
        if (this.user.testID) {
          this.$options.methods.User_IdwrtData(this)
        } else {
          this.user.BornTimeshow = true
        }
        // if (!user.testID) {
        //   user.IDAcitve = true
        //   msgselect = false
        // } else {
        //   user.IDAcitve = false
        // }
      }
      // 籍贯不能为空
      if (this.msgdatalist[0].HomeTownPlace === '请选择地区') {
        user.HomeTownPlaceAcitve = true
        msgselect = false
      } else {
        user.HomeTownPlaceAcitve = false
      }
      // Birth not empty
      if (this.msgdatalist[0].BornTime === '请选择日期') {
        user.BornTimeAcitve = true
        msgselect = false
      } else {
        user.BornTimeAcitve = false
      }
      // user Age >28 not gongqingtuanyuan
      if (this.msgdatalist[0].BornTime !== '请选择日期') {
        let userAge = jsGetAge(this.msgdatalist[0].BornTime)
        if (userAge > 28 && this.msgdatalist[0].Political === '共青团员') {
          user.PoliticalAcitve = true
          msgselect = false
        } else {
          user.PoliticalAcitve = false
        }
      }
      // user HEIGHT
      if (this.msgdatalist[0].Height > 200 || this.msgdatalist[0].Height < 140) {
        user.HeightAcitve = true
        msgselect = false
      } else {
        user.HeightAcitve = false
      }
      // Birth place
      if (this.msgdatalist[0].Birthplace === '请选择地区') {
        user.BirthplaceAcitve = true
        msgselect = false
      } else {
        user.BirthplaceAcitve = false
      }
      // Accountplace
      if (this.msgdatalist[0].Accountplace === '请选择地区') {
        user.AccountplaceAcitve = true
        msgselect = false
      } else {
        user.AccountplaceAcitve = false
      }
      // B user type faimlyplace not empty
      if (!user.TypeA) {
        if (this.msgdatalist[0].FamilyPlace === '请选择地区') {
          user.FamilyPlaceAcitve = true
          msgselect = false
        } else {
          user.FamilyPlaceAcitve = false
        }
      } else {
        user.FamilyPlaceAcitve = false
      }
      // user family place
      if (!user.TypeA) {
        if (this.msgdatalist[0].FamilyPlaceinput !== '') {
          console.log('不为空' + this.msgdatalist[0].FamilyPlaceinput)
          if (!reg.test(this.msgdatalist[0].FamilyPlaceinput)) {
            reg.lastIndex = 0
            user.FamilyPlaceinputAcitve = true
          } else {
            reg.lastIndex = 0
            user.FamilyPlaceinputAcitve = false
          }
        } else {
          console.log('信息框为空')
          user.FamilyPlaceinputAcitve = true
          msgselect = false
        }
      } else {
        // user is A type
        if (this.msgdatalist[0].FamilyPlace === '请选择地区' && this.msgdatalist[0].FamilyPlaceinput === '') {
          user.FamilyPlaceinputAcitve = false
          user.FamilyPlaceAcitve = false
        } else {
          if (this.msgdatalist[0].FamilyPlace === '请选择地区' && this.msgdatalist[0].FamilyPlaceinput !== '') {
            user.FamilyPlaceAcitve = true
            user.FamilyPlaceinputAcitve = false
            msgselect = false
          } else if (this.msgdatalist[0].FamilyPlace !== '请选择地区' && this.msgdatalist[0].FamilyPlaceinput === '') {
            user.FamilyPlaceAcitve = false
            user.FamilyPlaceinputAcitve = true
            msgselect = false
          } else if (this.msgdatalist[0].FamilyPlace !== '请选择地区' && this.msgdatalist[0].FamilyPlaceinput !== '') {
            user.FamilyPlaceAcitve = false
            user.FamilyPlaceinputAcitve = false
          }
        }
      }
      // now place
      if (this.msgdatalist[0].NowPlace === '请选择地区') {
        user.NowPlaceAcitve = true
        msgselect = false
      } else {
        user.NowPlaceAcitve = false
      }
      // user Accountplace
      if (this.msgdatalist[0].Accountplaceinput !== '') {
        if (!reg.test(this.msgdatalist[0].Accountplaceinput)) {
          reg.lastIndex = 0
          user.AccountplaceinputAcitve = true
        } else {
          reg.lastIndex = 0
          user.AccountplaceinputAcitve = false
        }
      } else {
        user.AccountplaceinputAcitve = true
        msgselect = false
      }
      // user now place
      if (this.msgdatalist[0].NowPlaceinput !== '') {
        if (!reg.test(this.msgdatalist[0].NowPlaceinput)) {
          reg.lastIndex = 0
          user.NowPlaceinputAcitve = true
        } else {
          reg.lastIndex = 0
          user.NowPlaceinputAcitve = false
        }
      } else {
        user.NowPlaceinputAcitve = true
        msgselect = false
      }
      if (msgselect) {
        const UserMsgList = this.msgdatalist[0]
        // 详细地址错误
        if (user.NowPlaceinputAcitve === true || user.AccountplaceinputAcitve === true) {
          MessageBox({
            title: '提交信息有误',
            message: '信息有误,确定执行此操作?',
            showCancelButton: true
          })
          MessageBox.confirm('详细地址信息有误,确定执行此操作?').then(action => {
            let msgjson = {
              Name: UserMsgList.Name,
              ContainerName: UserMsgList.ContainerName,
              IDType: UserMsgList.IDType,
              ID: this.user.ID,
              SexValue: UserMsgList.SexValue,
              Race: UserMsgList.Race,
              HomeTownPlace: UserMsgList.HomeTownPlace,
              BornTime: UserMsgList.BornTime,
              Political: UserMsgList.Political,
              Height: UserMsgList.Height,
              Blood: UserMsgList.Blood,
              Religion: UserMsgList.Religion,
              Specialty: UserMsgList.Specialty,
              Marriage: UserMsgList.Marriage,
              Account: UserMsgList.Account,
              Only_child: UserMsgList.Only_child,
              Birthplace: UserMsgList.Birthplace,
              Accountplace: UserMsgList.Accountplace,
              Accountplaceinput: UserMsgList.Accountplaceinput,
              FamilyPlace: UserMsgList.FamilyPlace,
              FamilyPlaceinput: UserMsgList.FamilyPlaceinput,
              NowPlace: UserMsgList.NowPlace,
              NowPlaceinput: UserMsgList.NowPlaceinput,
              MsgState: true,
              user_IdTypeValuecode_set: this.user_IdTypeValuecode_set,
              User_Racecode_set: this.User_Racecode_set,
              SexValuecode_set: this.SexValuecode_set,
              user_Politicalcode_set: this.user_Politicalcode_set,
              user_Bloodcode_set: this.user_Bloodcode_set,
              user_Religioncode_set: this.user_Religioncode_set,
              user_Marriagecode_set: this.user_Marriagecode_set,
              user_Accountcode_set: this.user_Accountcode_set,
              user_childcode_set: this.user_childcode_set,
              HomeTownPlaceArr: UserMsgList.HomeTownPlaceArr,
              BirthplaceArr: UserMsgList.BirthplaceArr,
              AccountplaceArr: UserMsgList.AccountplaceArr,
              FamilyPlaceArr: UserMsgList.FamilyPlaceArr,
              NowPlaceArr: UserMsgList.NowPlaceArr
            }
            this.$store.commit('UserAddMsg', msgjson)
            MessageBox('信息正确', '信息保存成功')
          }, () => {
            console.log('取消')
          })
        } else {
          let msgjson = {
            Name: UserMsgList.Name,
            ContainerName: UserMsgList.ContainerName,
            IDType: UserMsgList.IDType,
            ID: this.user.ID,
            SexValue: UserMsgList.SexValue,
            Race: UserMsgList.Race,
            HomeTownPlace: UserMsgList.HomeTownPlace,
            BornTime: UserMsgList.BornTime,
            Political: UserMsgList.Political,
            Height: UserMsgList.Height,
            Blood: UserMsgList.Blood,
            Religion: UserMsgList.Religion,
            Specialty: UserMsgList.Specialty,
            Marriage: UserMsgList.Marriage,
            Account: UserMsgList.Account,
            Only_child: UserMsgList.Only_child,
            Birthplace: UserMsgList.Birthplace,
            Accountplace: UserMsgList.Accountplace,
            Accountplaceinput: UserMsgList.Accountplaceinput,
            FamilyPlace: UserMsgList.FamilyPlace,
            FamilyPlaceinput: UserMsgList.FamilyPlaceinput,
            NowPlace: UserMsgList.NowPlace,
            NowPlaceinput: UserMsgList.NowPlaceinput,
            MsgState: true,
            user_IdTypeValuecode_set: this.user_IdTypeValuecode_set,
            User_Racecode_set: this.User_Racecode_set,
            SexValuecode_set: this.SexValuecode_set,
            user_Politicalcode_set: this.user_Politicalcode_set,
            user_Bloodcode_set: this.user_Bloodcode_set,
            user_Religioncode_set: this.user_Religioncode_set,
            user_Marriagecode_set: this.user_Marriagecode_set,
            user_Accountcode_set: this.user_Accountcode_set,
            user_childcode_set: this.user_childcode_set,
            HomeTownPlaceArr: UserMsgList.HomeTownPlaceArr,
            BirthplaceArr: UserMsgList.BirthplaceArr,
            AccountplaceArr: UserMsgList.AccountplaceArr,
            FamilyPlaceArr: UserMsgList.FamilyPlaceArr,
            NowPlaceArr: UserMsgList.NowPlaceArr
          }
          this.$store.commit('UserAddMsg', msgjson)
          MessageBox('信息正确', '信息保存成功')
        }
      } else {
        let MsgState = false
        this.$store.commit('UserMsgState', MsgState)
        MessageBox('提交信息有误', '有误信息已经标红,请修改')
      }
    }
  },
  computed: {
    ...mapState({
      ContainerName: state => state.ContainerName,
      msgdatalist: state => state.usermsglist.msgdatalist
    })
  },
  mounted () {
    console.log('进入个人信息页面')
    console.log(this.$store.state.CityList)
    // let arr = JSON.parse(localStorage.CityList)
    // let arr = [{
    //    id: '001',
    //    value: '北京',
    //    children:[{
    //     id: '00101',
    //     value: '北京市',
    //     children:[{
    //     id: '00101',
    //     value: '北京市',
    //     city: '东城区'
    //     }]
    //    }]
    // }, {
    //    id: '001',
    //    value: '北京',
    //    children:[{
    //     id: '00101',
    //     value: '北京市',
    //     children:[{
    //     id: '00101',
    //     value: '北京市',
    //     city: '东城区'
    //     }]
    //    }]
    // }]
    this.AREALIST = ''
    // this.AREALIST = arr.provinceList
    // this.AREALIST = JSON.parse(localStorage.CityList)
    // console.log(this.AREALIST)
  }
}
</script>
<style lang="stylus" scoped>
@import '~@/assets/styles/varibles.styl'
@import '~@/assets/styles/minxs.styl'
.Basic-ul
  box-sizing:border-box
  width:100%
  padding:.1rem
  .Basic-overli
   font-size:.27rem
   display:flex
   .Basicmsgicon-overleft
    flex: 3
    text-align: right
    color: #797979
   .Basicmsgicon-overcontainer
    flex: 9
    padding-left: 0.3rem
    color: #000
  .Basic-li
   height:.7rem
   line-height:.7rem
   font-size:.27rem
   display:flex
   .Basicmsg-left
     flex:3
     text-align:right
     color:#797979
   .Basicmsg-container
     box-sizing:border-box
     padding-left:.3rem
     flex:9
     color:#000000
     ellipsis()
     input
      width:100%
     .Basiciconfont-time
       margin-left:.1rem
   .Basicmsgicon-left
     flex:3
     text-align:right
     color:#797979
   .Basicmsgicon-container
     flex:9
     padding-left:.3rem
     color:#000000
   .Basicmsgicon-right
     flex:2
     .BasicIconbg
      font-size:.5rem
      color:pink
.overlayer
    position: fixed
    left: 0
    top: 0
    z-index:10
    width: 100%
    height: 100%
    opacity: 0.5
    background: #000
.Basic_selectsex
    position: fixed
    left: 0
    top: 5rem
    width:100%
    z-index:11
.levelselect
  width:$selectWidth
  .picker-toolbar-title
    display:flex
    flex-direction: row
    justify-content: space-around
    height: 40px
    line-height: 40px
    font-size: 16px
</style>
